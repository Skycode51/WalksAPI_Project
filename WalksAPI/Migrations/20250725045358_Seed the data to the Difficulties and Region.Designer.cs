// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WalksAPI.Data;

#nullable disable

namespace WalksAPI.Migrations
{
    [DbContext(typeof(WalksDbContext))]
    [Migration("20250725045358_Seed the data to the Difficulties and Region")]
    partial class SeedthedatatotheDifficultiesandRegion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WalksAPI.Models.Domain.Difficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("difficulties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("158c5470-7990-40c0-a0c2-0884cfd0378f"),
                            Name = "Easy"
                        },
                        new
                        {
                            Id = new Guid("a2a31082-c3c7-4e96-96a4-43d662e06d6f"),
                            Name = "Medium"
                        },
                        new
                        {
                            Id = new Guid("b6f10401-c0da-4674-a5cd-20a8680ea0a3"),
                            Name = "Hard"
                        });
                });

            modelBuilder.Entity("WalksAPI.Models.Domain.Regions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("regions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1c3b0d2-4e8a-4c5b-9f6d-7e8f9a0b1c2d"),
                            Code = "NR",
                            Name = "North Region",
                            RegionImageUrl = "https://example.com/north-region.jpg"
                        },
                        new
                        {
                            Id = new Guid("d2c3b0d2-4e8a-4c5b-9f6d-7e8f9a0b1c2d"),
                            Code = "SR",
                            Name = "South Region",
                            RegionImageUrl = "https://example.com/south-region.jpg"
                        },
                        new
                        {
                            Id = new Guid("c3b0d2f1-4e8a-4c5b-9f6d-7e8f9a0b1c2d"),
                            Code = "ER",
                            Name = "East Region",
                            RegionImageUrl = "https://example.com/east-region.jpg"
                        },
                        new
                        {
                            Id = new Guid("b0d2f1c3-4e8a-4c5b-9f6d-7e8f9a0b1c2d"),
                            Code = "WR",
                            Name = "West Region",
                            RegionImageUrl = "https://example.com/west-region.jpg"
                        });
                });

            modelBuilder.Entity("WalksAPI.Models.Domain.Walks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LengthInKm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WalkImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("RegionId");

                    b.ToTable("walks");
                });

            modelBuilder.Entity("WalksAPI.Models.Domain.Walks", b =>
                {
                    b.HasOne("WalksAPI.Models.Domain.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WalksAPI.Models.Domain.Regions", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("Region");
                });
#pragma warning restore 612, 618
        }
    }
}
